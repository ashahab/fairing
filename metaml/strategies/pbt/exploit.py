import logging
import random

logger = logging.getLogger('metaml')

class ExploitStrategy(object):
    pass


class Truncation(ExploitStrategy):
    def exploit(self, current_instance_id, scoreboard):
      # Check if current_istance_id is in the worst 20%, if yes returns the path 
      # and hp of a model that is in the top 20%
      # otherwise returns None
      population_size = len(scoreboard)
      curr_item = list(filter(lambda x: x['id'] == current_instance_id, scoreboard))[0]
      rank = scoreboard.index(curr_item)

      if not rank < population_size*0.2:
        return None, None

      logger.error('worst performing')
      # randomly choose a member to copy from the top 20%
      top_id = random.randint(int(population_size-population_size*0.2), population_size-1)
      print(top_id)
      return scoreboard[top_id]['model_path'], scoreboard[top_id]['hp']



class BinaryTournament(ExploitStrategy):
    pass
